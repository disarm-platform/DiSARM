% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ppmify.R
\name{ppmify}
\alias{ppmify}
\title{create a ppm object from point data}
\usage{
ppmify(coords, area = NULL, covariates = NULL, method = c("grid",
  "count"), density = 10)
}
\arguments{
\item{coords}{a matrix, dataframe or SpatialPoints* object giving the
coordinates of the points to use in the PPM analysis. If a matrix or
dataframe, the first column should give the horizontal
(x/longitude/easting) coordinates, and the second column the vertical
(y/latitude/northing) coordinates.}

\item{area}{an optional extent, SpatialPolygons* or Raster* object giving the
area over which to model the point process. If ignored, a rectangle
defining the extent of \code{coords} will be used instead.}

\item{covariates}{an optional Raster* object containing covariates for
modelling the point process}

\item{method}{the method for selecting quadrature points. This will either
generate a set of integration points with appropriate weights, or count the
number of points falling in each cell (if \code{method = 'count'}). See
\code{Details} for information on the available approaches.}

\item{density}{the number of integration points required per square kilometre
(ignored if \code{method = 'count'})}
}
\value{
an object of classes \code{ppm} and \code{data.frame}
}
\description{
create a \code{ppm} object containing the information needed to
  fit a Poisson point process model using Poisson regression modelling
  software.
}
\details{
<integration details to be added>
}
\examples{
# generate some fake point data
r <- raster(system.file("external/test.grd", package="raster"))
pts <- sampleRandom(r, 100, xy = TRUE)[, 1:2]
plot(r, col = grey(0.8))
points(pts, pch = 16, cex = 0.5)

# generate ppm data
ppm <- ppmify(pts, area = r, covariates = r)

# fit a model
m <- glm(points ~ test + offset(log(weights)),
         data = ppm,
         family = poisson)

# predict to a raster, remembering to set the offset value
p <- predict(r, m, type = 'response', const = data.frame(weights = 1))

# plot results (prediction is in points per square km)
plot(p)
points(ppm[ppm$points == 1, c('x', 'y')], pch = 16, cex = 0.5)
}
